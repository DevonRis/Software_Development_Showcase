// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillsShowcase.Api.Models.Data;

#nullable disable

namespace SkillsShowcase.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240910055756_UpdatedSeedData")]
    partial class UpdatedSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.CarPurchaseEventTypes", b =>
                {
                    b.Property<int>("CarPurchaseEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CarPurchaseEventTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPurchaseEventTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarPurchaseEventTypeId");

                    b.ToTable("CarPurchaseEventTypes");

                    b.HasData(
                        new
                        {
                            CarPurchaseEventTypeId = 0,
                            CarPurchaseEventTypeDescription = "Car In process of getting bought but not sold yet.",
                            CarPurchaseEventTypeName = "CarPurchaseInProcess"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 1,
                            CarPurchaseEventTypeDescription = "Credit check in review but approved yet.",
                            CarPurchaseEventTypeName = "CreditCheckInReview"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 2,
                            CarPurchaseEventTypeDescription = "Credit has been declined. Customer must purchase in cash.",
                            CarPurchaseEventTypeName = "CreditDeclined"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 3,
                            CarPurchaseEventTypeDescription = "Credit has been accepted. Customer can purchase in credit.",
                            CarPurchaseEventTypeName = "CreditAccepted"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 4,
                            CarPurchaseEventTypeDescription = "Car has been sold.",
                            CarPurchaseEventTypeName = "CarsSold"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 5,
                            CarPurchaseEventTypeDescription = "Car cannot be given to customer without full down payment.",
                            CarPurchaseEventTypeName = "CarsPurchaseHold"
                        },
                        new
                        {
                            CarPurchaseEventTypeId = 6,
                            CarPurchaseEventTypeDescription = "Customer bought car but not yet in physical store.",
                            CarPurchaseEventTypeName = "CarsInRouteForPurchase"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.CarPurchaseInfoLog", b =>
                {
                    b.Property<int>("CarPurchaseInfoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarPurchaseInfoLogId"));

                    b.Property<DateTime>("CarArrivalInDealership")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarModel")
                        .HasColumnType("int");

                    b.Property<int>("CarModelPrice")
                        .HasColumnType("int");

                    b.Property<int>("CarModelQuantityLeft")
                        .HasColumnType("int");

                    b.Property<DateTime>("CarPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarPurchaseStatus")
                        .HasColumnType("int");

                    b.Property<int>("CustomerCreditStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarPurchaseInfoLogId");

                    b.HasIndex("CarPurchaseStatus");

                    b.ToTable("CarPurchaseInfoLogs");

                    b.HasData(
                        new
                        {
                            CarPurchaseInfoLogId = 1,
                            CarArrivalInDealership = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 60,
                            CarModelPrice = 40000,
                            CarModelQuantityLeft = 10,
                            CarPurchaseDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Devon Rismay"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 2,
                            CarArrivalInDealership = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 350,
                            CarModelPrice = 123000,
                            CarModelQuantityLeft = 5,
                            CarPurchaseDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "John Hull"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 3,
                            CarArrivalInDealership = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 300,
                            CarModelPrice = 92000,
                            CarModelQuantityLeft = 2,
                            CarPurchaseDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Quinshae Hopkins"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 4,
                            CarArrivalInDealership = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 400,
                            CarModelPrice = 65000,
                            CarModelQuantityLeft = 3,
                            CarPurchaseDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Robert Pyron"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 5,
                            CarArrivalInDealership = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 80,
                            CarModelPrice = 236000,
                            CarModelQuantityLeft = 2,
                            CarPurchaseDate = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 0,
                            CustomerCreditStatus = 1,
                            CustomerName = "John Goldeen"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 6,
                            CarArrivalInDealership = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 200,
                            CarModelPrice = 101000,
                            CarModelQuantityLeft = 7,
                            CarPurchaseDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 0,
                            CustomerCreditStatus = 3,
                            CustomerName = "Crystal Myrondeen"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 7,
                            CarArrivalInDealership = new DateTime(2018, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 120,
                            CarModelPrice = 95000,
                            CarModelQuantityLeft = 9,
                            CarPurchaseDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 5,
                            CustomerCreditStatus = 3,
                            CustomerName = "James Mayfield"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 8,
                            CarArrivalInDealership = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 100,
                            CarModelPrice = 80000,
                            CarModelQuantityLeft = 1,
                            CarPurchaseDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 6,
                            CustomerCreditStatus = 3,
                            CustomerName = "Chris Mayson"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 9,
                            CarArrivalInDealership = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 150,
                            CarModelPrice = 120000,
                            CarModelQuantityLeft = 5,
                            CarPurchaseDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Barack Husaine"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 10,
                            CarArrivalInDealership = new DateTime(2016, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 250,
                            CarModelPrice = 150000,
                            CarModelQuantityLeft = 1,
                            CarPurchaseDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 0,
                            CustomerCreditStatus = 1,
                            CustomerName = "Johnson Crayfield"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 11,
                            CarArrivalInDealership = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 500,
                            CarModelPrice = 250000,
                            CarModelQuantityLeft = 1,
                            CarPurchaseDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Johnson Jones"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 12,
                            CarArrivalInDealership = new DateTime(2017, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 600,
                            CarModelPrice = 300000,
                            CarModelQuantityLeft = 1,
                            CarPurchaseDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 4,
                            CustomerCreditStatus = 3,
                            CustomerName = "Eugene Paniccia"
                        },
                        new
                        {
                            CarPurchaseInfoLogId = 13,
                            CarArrivalInDealership = new DateTime(2015, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarModel = 90,
                            CarModelPrice = 80000,
                            CarModelQuantityLeft = 13,
                            CarPurchaseDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CarPurchaseStatus = 0,
                            CustomerCreditStatus = 1,
                            CustomerName = "Natalie Cyris"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.DcVillains", b =>
                {
                    b.Property<int>("DcVillanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DcVillanId"));

                    b.Property<string>("CityLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlacedInArkham")
                        .HasColumnType("int");

                    b.Property<int?>("SupermanLevelVillan")
                        .HasColumnType("int");

                    b.Property<int?>("ThreatLevel")
                        .HasColumnType("int");

                    b.Property<int?>("VillanAge")
                        .HasColumnType("int");

                    b.Property<string>("VillanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VillanPower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weaknesses")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DcVillanId");

                    b.ToTable("DcVillains");

                    b.HasData(
                        new
                        {
                            DcVillanId = 1,
                            CityLocation = "Gotham",
                            PlacedInArkham = 0,
                            ThreatLevel = 3,
                            VillanAge = 43,
                            VillanName = "Joker",
                            VillanPower = "None/Cunning",
                            Weaknesses = "None"
                        },
                        new
                        {
                            DcVillanId = 2,
                            CityLocation = "Apokolips",
                            PlacedInArkham = 2,
                            ThreatLevel = 4,
                            VillanAge = 1000,
                            VillanName = "Darkseid",
                            VillanPower = "SuperStrength/CosmicPowers",
                            Weaknesses = "None/Superman"
                        },
                        new
                        {
                            DcVillanId = 3,
                            CityLocation = "Metropolis",
                            PlacedInArkham = 0,
                            ThreatLevel = 2,
                            VillanAge = 44,
                            VillanName = "Lex Luthor",
                            VillanPower = "Genius Intellect",
                            Weaknesses = "None/Regular Human/Superman"
                        },
                        new
                        {
                            DcVillanId = 4,
                            CityLocation = "Gothom",
                            PlacedInArkham = 0,
                            ThreatLevel = 5,
                            VillanAge = 58,
                            VillanName = "DeathStroke",
                            VillanPower = "Enhanced Human",
                            Weaknesses = "None"
                        },
                        new
                        {
                            DcVillanId = 5,
                            CityLocation = "Gothom",
                            PlacedInArkham = 1,
                            ThreatLevel = 5,
                            VillanAge = 49,
                            VillanName = "Two-Face",
                            VillanPower = "None",
                            Weaknesses = "None"
                        },
                        new
                        {
                            DcVillanId = 6,
                            CityLocation = "Unknown",
                            PlacedInArkham = 2,
                            ThreatLevel = 4,
                            VillanAge = 1000,
                            VillanName = "Braniac",
                            VillanPower = "Genius Intellect/Cosmic Powers",
                            Weaknesses = "None/Superman"
                        },
                        new
                        {
                            DcVillanId = 7,
                            CityLocation = "Gothom",
                            PlacedInArkham = 0,
                            ThreatLevel = 5,
                            VillanAge = 37,
                            VillanName = "Riddler",
                            VillanPower = "None",
                            Weaknesses = "None"
                        },
                        new
                        {
                            DcVillanId = 8,
                            CityLocation = "Space",
                            PlacedInArkham = 0,
                            ThreatLevel = 2,
                            VillanAge = 59,
                            VillanName = "Sinestro",
                            VillanPower = "Yellow Lantern Ring",
                            Weaknesses = "Removal of Ring"
                        },
                        new
                        {
                            DcVillanId = 9,
                            CityLocation = "Unknown",
                            PlacedInArkham = 2,
                            ThreatLevel = 4,
                            VillanAge = 1000,
                            VillanName = "Doomsday",
                            VillanPower = "SuperStrength/Invulnerable",
                            Weaknesses = "None/Superman"
                        },
                        new
                        {
                            DcVillanId = 10,
                            CityLocation = "Star City",
                            PlacedInArkham = 0,
                            ThreatLevel = 4,
                            VillanAge = 40,
                            VillanName = "Professor Zoom",
                            VillanPower = "Reverse Speed Force",
                            Weaknesses = "None/Superman"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Email = "Devonpaniccia@gmail.com",
                            FirstName = "Devon",
                            Gender = 0,
                            LastName = "Rismay",
                            MaritalStatus = 0,
                            PhoneNumber = "8322156677"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Email = "JohnHull@gmail.com",
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Hull",
                            MaritalStatus = 0,
                            PhoneNumber = "8322156676"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Email = "QuinshaeHopkins@gmail.com",
                            FirstName = "Quinshae",
                            Gender = 1,
                            LastName = "Hopkins",
                            MaritalStatus = 0,
                            PhoneNumber = "8322156674"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Email = "RobertPyron@gmail.com",
                            FirstName = "Robert",
                            Gender = 0,
                            LastName = "Pyron",
                            MaritalStatus = 1,
                            PhoneNumber = "8322156675"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.EmployeeSecretKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeSecretKeys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeName = "Devon Rismay",
                            SecretKey = "Auth-234252-rgsdfg4553-234dsdf-5555"
                        },
                        new
                        {
                            Id = 2,
                            EmployeeName = "John Hull",
                            SecretKey = "Auth-234252-rgsdfg4553-234dsdf-5554"
                        },
                        new
                        {
                            Id = 3,
                            EmployeeName = "Quinshae Hopkins",
                            SecretKey = "Auth-234252-rgsdfg4553-234dsdf-5553"
                        },
                        new
                        {
                            Id = 4,
                            EmployeeName = "Robert Pyron",
                            SecretKey = "Auth-234252-rgsdfg4553-234dsdf-5552"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.Guitars", b =>
                {
                    b.Property<int>("GuitarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuitarId"));

                    b.Property<DateTime?>("BuildYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuitarManufacturer")
                        .HasColumnType("int");

                    b.Property<string>("GuitarModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GuitarPrice")
                        .HasColumnType("float");

                    b.HasKey("GuitarId");

                    b.ToTable("Guitars");

                    b.HasData(
                        new
                        {
                            GuitarId = 1,
                            BuildYear = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 1,
                            GuitarModel = "Custom Shop American Stratocaster",
                            GuitarPrice = 5000.2299999999996
                        },
                        new
                        {
                            GuitarId = 2,
                            BuildYear = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 1,
                            GuitarModel = "Custom Shop American Telecaster",
                            GuitarPrice = 4000.4499999999998
                        },
                        new
                        {
                            GuitarId = 3,
                            BuildYear = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 1,
                            GuitarModel = "Special Edition Telecaster FMT HH",
                            GuitarPrice = 1000.55
                        },
                        new
                        {
                            GuitarId = 4,
                            BuildYear = new DateTime(2024, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 1,
                            GuitarModel = "Acoustasonic Telecaster",
                            GuitarPrice = 1998.6300000000001
                        },
                        new
                        {
                            GuitarId = 5,
                            BuildYear = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 2,
                            GuitarModel = "ES-339 Figured Semi-hollowbody",
                            GuitarPrice = 3500.8899999999999
                        },
                        new
                        {
                            GuitarId = 6,
                            BuildYear = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 2,
                            GuitarModel = "SG Standard 61 Maestro Vibrola",
                            GuitarPrice = 2300.23
                        },
                        new
                        {
                            GuitarId = 7,
                            BuildYear = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 3,
                            GuitarModel = "Silver Sky",
                            GuitarPrice = 2749.23
                        },
                        new
                        {
                            GuitarId = 8,
                            BuildYear = new DateTime(2000, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuitarManufacturer = 4,
                            GuitarModel = "Artstar AS2000",
                            GuitarPrice = 2600.23
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.SessionLogs", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionCountsPerDate")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.ToTable("SessionLogs");

                    b.HasData(
                        new
                        {
                            SessionId = new Guid("54392352-17c8-438b-897a-116fdb2c2fba"),
                            CreatedTime = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "01.6.0.20",
                            SessionCountsPerDate = 1,
                            UserAgent = "Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("067b61fb-3736-40f8-b14f-9c98f548a42c"),
                            CreatedTime = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "02.6.0.20",
                            SessionCountsPerDate = 15,
                            UserAgent = "Safari\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("85059052-13ee-4d51-9ae0-4d5c62fe1a40"),
                            CreatedTime = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "03.6.0.20",
                            SessionCountsPerDate = 30,
                            UserAgent = "FireFox\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("78b43996-dfe4-4097-bd5b-f34855ebccb2"),
                            CreatedTime = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "04.6.0.20",
                            SessionCountsPerDate = 23,
                            UserAgent = "EnterExplorer\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("f1352ae5-0421-4ff3-ad92-275bfc81e19e"),
                            CreatedTime = new DateTime(2024, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "05.6.0.20",
                            SessionCountsPerDate = 43,
                            UserAgent = "Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("3a4af92c-b183-487f-a644-96d03e43f0aa"),
                            CreatedTime = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "06.6.0.20",
                            SessionCountsPerDate = 2,
                            UserAgent = "Windows\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("603e68ea-e81f-46b0-bcdf-bd2b8424fe17"),
                            CreatedTime = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "07.6.0.20",
                            SessionCountsPerDate = 6,
                            UserAgent = "Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("b3487638-0b17-461f-bfdb-da5af929223e"),
                            CreatedTime = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "08.6.0.20",
                            SessionCountsPerDate = 33,
                            UserAgent = "TechJuice\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("d5237fdc-bd65-49f5-98d4-6e34b65b0b99"),
                            CreatedTime = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "09.6.0.20",
                            SessionCountsPerDate = 20,
                            UserAgent = "TechJuice\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("4fab71c8-0116-4bda-8d83-18c141283338"),
                            CreatedTime = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "10.6.0.20",
                            SessionCountsPerDate = 52,
                            UserAgent = "TechJuice\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("4ee48909-9147-419d-8430-d3b79933bb44"),
                            CreatedTime = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "11.6.0.20",
                            SessionCountsPerDate = 10,
                            UserAgent = "Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        },
                        new
                        {
                            SessionId = new Guid("f796560e-b3ac-4e72-b342-28bebd845042"),
                            CreatedTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IpAddress = "12.6.0.20",
                            SessionCountsPerDate = 49,
                            UserAgent = "Mozilla\\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/127.0.0.0 Safari\\/537.36"
                        });
                });

            modelBuilder.Entity("SkillsShowcase.Shared.Domain.Models.CarPurchaseInfoLog", b =>
                {
                    b.HasOne("SkillsShowcase.Shared.Domain.Models.CarPurchaseEventTypes", null)
                        .WithMany()
                        .HasForeignKey("CarPurchaseStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
